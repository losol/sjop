@page 
@inject Shoppur.Config.StripeSettings StripeSettings 
@model CheckoutModel
@{ 
  ViewData["Title"] = "Send bestilling"; }

<div class="py-5 text-center">
  <img
    class="d-block mx-auto mb-4"
    src="~/assets/images/kommunevapen-small.png"
    alt=""
    width="72"
    height="72"
  />
  <h2>Bestilling</h2>
  <p class="lead">
    Kurt pakker og sender så snart du har fylt ut og sendt inn.
  </p>
  <button id="empty-cart" class="btn btn-info">Tøm handlekurven</button>
</div>

<ul class="list-group mb-3" id="cart-list"></ul>

<div class="row">
  <div class="col-md-6 mx-auto pt-5">
    <h4 class="mb-3">Navn og adresse</h4>
    <form class="needs-validation" id="order-form" novalidate>
      <div class="mb-3">
        <label for="name">Navn</label>
        <input
          type="text"
          class="form-control"
          id="name"
          name="name"
          placeholder="Kurt Teknisk"
          required
        />
        <div class="invalid-feedback">
          Du m&aring; oppgi navn.
        </div>
      </div>

      <div class="mb-3">
        <label for="email">E-post </label>
        <input
          type="email"
          class="form-control"
          id="email"
          name="email"
          placeholder="kurt@losvikkommune.no"
          required
        />
        <div class="invalid-feedback">
          Vi m&aring; ha eposten din.
        </div>
      </div>

      <div class="mb-3">
        <label for="address">Adresse</label>
        <input
          type="text"
          class="form-control"
          id="address"
          name="address"
          placeholder="Losnesmyra 42"
        />
        <div class="invalid-feedback">
          Oppgi adresse.
        </div>
      </div>

      <div class="row">
        <div class="col-md-3 mb-3">
          <label for="zip">Postnummer</label>
          <input
            type="text"
            class="form-control"
            id="zip"
            name="zip"
            placeholder="8000"
            required
          />
          <div class="invalid-feedback">
            Zip code required.
          </div>
        </div>
        <div class="col-md-9 mb-3">
          <label for="city">Poststed</label>
          <input
            type="text"
            class="form-control"
            id="city"
            name="city"
            placeholder="Losvika"
            required
          />
          <div class="invalid-feedback">
            Fyll ut poststed.
          </div>
        </div>
      </div>
      <div class="mb-3">
        <label for="country">Land</label>
        <input
          type="text"
          class="form-control"
          id="country"
          name="country"
          placeholder="kurt@losvikkommune.no"
          value="Norge"
        />
      </div>
      <hr class="mb-4" />

      <h4 class="mb-3">Betaling</h4>

      <div class="d-block my-3">  
        <div class="form-check form-check-inline">
          <input
            id="paymentprovider-stripeelements"
            value="StripeElements"
            name="paymentprovider"
            type="radio"
            class="form-check-input paymentprovider-input"
            checked
          />
          <label class="form-check-label" for="paymentprovider-stripeelements" >Betal med kort</label>
        </div>
      </div>

      <div class="form-group">
      <label for="card-element">Kortopplysninger</label>
      <div id="card-element" class="form-control">
        <!-- A Stripe Element will be inserted here. -->
      </div>
      <div id="card-errors" role="alert"> </div>
    </div>

      <hr class="mb-4" />
      <button class="btn btn-primary btn-lg btn-block" type="submit">
        Betal
      </button>
    </form>
  </div>
</div>

@section Scripts {
<script src="https://js.stripe.com/v3/"></script>
<script>
  (function() {
     // Set up Stripe and Stripe elements
  var stripe = Stripe("@StripeSettings.PublishableKey");
  var elements = stripe.elements({
	  locale: 'no',
  });
// Custom styling can be passed to options when creating an Element.
// (Note that this demo uses a wider set of styles than the guide below.)
var style = {
  base: {
    color: '#32325d',
    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
    fontSmoothing: 'antialiased',
    fontSize: '16px',
    '::placeholder': {
      color: '#669'
    }
  },
  invalid: {
    color: '#fa755a',
    iconColor: '#fa755a'
  }
};

// Create an instance of the card Element.
var card = elements.create('card', {style: style});

// Add an instance of the card Element into the `card-element` <div>.
card.mount('#card-element');

// Handle real-time validation errors from the card Element.
card.addEventListener('change', function(event) {
  var displayError = document.getElementById('card-errors');
  if (event.error) {
    displayError.textContent = event.error.message;
  } else {
    displayError.textContent = '';
  }
});

  // Fetch and populate products from Cart
  function createNode(element) {
    return document.createElement(element);
  }

  function append(parent, el) {
    return parent.appendChild(el);
  }

  refreshCart();
  setPaymentProvider();

  var paymentRadios = Array.from(document.getElementsByClassName("paymentprovider-input"));
  paymentRadios.forEach (element =>
    element.addEventListener('click', function (event) {
      setPaymentProvider();
    })
  );

  function setPaymentProvider() {
    // const payRadio = document.getElementById("paymentprovider");
    selectedProvider = document.querySelector('input[name="paymentprovider"]:checked').value

    fetch('api/v1/cart/paymentprovider', {
            method: "post",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json"
            },
            body: JSON.stringify({ PaymentProviderType : selectedProvider }) 
          })
          .then( (response) => console.log(response.json()));
  
  }

  function refreshCart() {
    const ul = document.getElementById("cart-list");
    ul.innerHTML = "";
    const url = "api/v1/cart";
    fetch(url)
      .then(resp => resp.json())
      .then(function(data) {
        console.log(data);
        data.cartItems.map(function(cartItem) {
          let li = createNode("li"),
            qtyIncrease = createNode("button"),
            qtyDecrease = createNode("button"),
            productNameSpan = createNode("div");
          priceSpan = createNode("span");

          li.classList.add(
            "list-group-item",
            "d-flex",
            "justify-content-between",
            "lh-condensed"
          );

          // Product name
          productNameSpan.innerHTML = `${cartItem.quantity}x <b>${cartItem.product.name}</b>`;

          qtyIncrease.innerHTML = "+";
          qtyIncrease.classList.add("btn", "btn-sm", "btn-light", "ml-1");
          qtyIncrease.addEventListener("click", function(event) {
            fetch("/api/v1/cart/additem", {
              method: "post",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ ProductId: cartItem.product.id })
            }).then(none => refreshCart());
          });

          append(productNameSpan, qtyIncrease);
          qtyDecrease.innerHTML = "-";
          qtyDecrease.classList.add("btn", "btn-sm", "btn-light");
          qtyDecrease.addEventListener("click", function(event) {
            fetch("/api/v1/cart/removeitem", {
              method: "post",
              headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ ProductId: cartItem.product.id })
            }).then(none => refreshCart());
          });

          append(productNameSpan, qtyDecrease);
          append(li, productNameSpan);

          // Price
          if (cartItem.quantity != 1) {
            priceSpan.innerHTML = `${
              cartItem.quantity
            }x ${cartItem.product.totalPrice.toFixed(2)} = kr ${
              cartItem.lineTotal
            } `;
          } else {
            priceSpan.innerHTML = `kr ${cartItem.product.totalPrice.toFixed(
              2
            )}`;
          }

          append(li, priceSpan);

          append(ul, li);
        });

        // Add shipping
        let shippingLi = createNode("li"),
          shippingText = createNode("span"),
          shippingCost = createNode("span");

        shippingLi.classList.add(
          "list-group-item",
          "d-flex",
          "justify-content-between",
          "lh-condensed"
        );
        shippingText.innerHTML = `Frakt`;
        shippingCost.innerHTML = `kr ${data.shippingCost.totalShippingCost}`;

        append(shippingLi, shippingText);
        append(shippingLi, shippingCost);
        append(ul, shippingLi);

        // Add total
        let totalLi = createNode("li"),
          totalText = createNode("span"),
          totalCost = createNode("span");

        totalLi.classList.add(
          "list-group-item",
          "d-flex",
          "justify-content-between",
          "lh-condensed",
          "font-weight-bold"
        );
        totalText.innerHTML = `Totalt`;
        totalCost.innerHTML = `kr ${data.cartTotal.toFixed(2)}`;

        append(totalLi, totalText);
        append(totalLi, totalCost);
        append(ul, totalLi);
      })

      .catch(function(error) {
        console.log(error);
      });
  }

  // Example starter JavaScript for disabling form submissions if there are invalid fields
  (function() {
    "use strict";
    window.addEventListener(
      "load",
      function() {
        // Empty cart button
        var emptycartbutton = document.getElementById("empty-cart");
        const deletecarturl = "/api/v1/cart";
        emptycartbutton.addEventListener("click", function(event) {
          fetch(deletecarturl, {
            method: "delete",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json"
            },
            body: null
          }).then(none => location.reload());
        });

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.getElementsByClassName("needs-validation");
        // Loop over them and prevent submission
        var validation = Array.prototype.filter.call(forms, function(form) {
          form.addEventListener(
            "submit",
            function(event) {
              if (form.checkValidity() === false) {
                event.preventDefault();
                event.stopPropagation();
              }
              form.classList.add("was-validated");
            },
            false
          );
        });
      },
      false
    );
  })();

    function toJSONString(form) {
      var obj = {};
      var elements = form.querySelectorAll("input, select, textarea");
      for (var i = 0; i < elements.length; ++i) {
        var element = elements[i];
        var name = element.name;
        var value = element.value;

        if (name) {
          obj[name] = value;
        }
      }
      return JSON.stringify(obj);
    }

    document.addEventListener("DOMContentLoaded", function() {
      var form = document.getElementById("order-form");
      // var output = document.getElementById("output");
      form.addEventListener(
        "submit",
        function(e) {
          e.preventDefault();
          var formjson = toJSONString(this);
          const updateCustomerUrl = "api/v1/cart/customer";
          const submitOrderUrl = "api/v1/cart/submit-order";
          const paymentUrl = "api/v1/payment";

          fetch(updateCustomerUrl, {
            method: "post",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json"
            },
            body: formjson
          })
            .then(response => response.json())
            .then(function(json) {
              console.log(json);
              return fetch(submitOrderUrl, {
                method: "post"
              })
              .then(response => response.json());
            })

            .then(function(order) {
              var orderobject = { OrderId: order.id };

                return fetch(paymentUrl, {
                      method: "post",
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json"
                      },
                      body: JSON.stringify(orderobject)
                    });

                })
                
            .then(resp => resp.json())
            .then(function(payment) {
              if (selectedProvider == "StripeElements") {
                  stripe.handleCardPayment(
                    payment.client_secret, card, {
                      payment_method_data: {
                        billing_details: {name: document.getElementById("name").value}
                      }
                    }
                  ).then(function(result) {
                    if (result.error) {
                      // Display error.message in your UI.
                      window.location = '/PaymentFailed';
                    } else {
                      console.log(result);
                      window.location = '/PaymentSuccess';
                    }
                  });
              }
              if (selectedProvider == "StripeCheckout") {
                stripe.redirectToCheckout({
                  sessionId: payment.id
                });
              }
              
            })

            .catch(function(error) {
              console.log(error);
            });
        },
        false
      );
    });
  })();
</script>

}